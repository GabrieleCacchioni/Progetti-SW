Ciao!
VERSIONE ZERO
-------------

Modelliamo StateCharts che sono di fatto automi a stati finiti (FSA) cioè senza gerarchia e senza parallelismo.

Non rappresentiamo la storia, né i connettori.

<<da approfondire il discorso di stati iniziali (default) e finali, al momento assumiamo che il primo stato è lo stato iniziale e l'ultimo stato e lo stato finale>>

Eventi, condizioni e azioni sono semplici stringhe alfanumeriche, senza alcun operatore logico di combinazione o modifica. Le condizioni rappresentano valori booleani, Le azioni sono atomiche (si stampa la stringa) oppure assegnazione a condizioni di vero/falso.

La SC viene rappresentata da un file XML scritto secondo il formato di SCXML

I tag ammessi sono:
- scxml
  - datamodel
    - data
  - state
    - transition
  - final

In datamodel si rappresentano le condizioni.

Gli attributi ammessi sono (+ obbligatorio):

*scxml
  + xmlns
  + version
  - initial (se assente il primo elemento state presente nel file è lo stato iniziale)
* data
  + id
  + expr
* state
  + id
* transition
  - event
  - condition
  - target
* final
  + id


Gli eventi che vengono letti dalla Statechart per determinare la sua evoluzione sono rappresentati in un file testuale eventi.txt uno per riga


Le classi sono (- attributo, * feature)

STATO
 - id: STRING
 - iniziale: BOOLEAN ???non serve???
 - finale: BOOLEAN
 - transizioni: ARRAY<TRANSIZIONE>
 * determinismo (evento_corrente: STRING): BOOLEAN
   -- ritorna vero se con evento_corrente è attivabile nella configurazione corrente al più 1 transizione
   -- ritorna falso se con evento_corrente sono attivabili nella configurazione corrente almeno 2 transizioni
 * target (evento_corrente: STRING): STATO
   require
     determinismo(evento_corrente)
   -- ritorna Void se con evento_corrente nella configurazione corrente non è attivabile alcuna transizione
   -- ritorna lo stato a cui porta l'unica transizione attivabile nella configurazione corrente con evento_corrente

TRANSIZIONE
 - evento: STRING
 - condizione: STRING
 - azione: AZIONE
 - target: STATO

deferred AZIONE
 - id: STRING

ASSEGNAZIONE
  inherit AZIONE
  - condizione: STRING
  - valore: BOOLEAN

FITTIZIA
  inherit AZIONE

CONFIGURAZIONE
 - stato_corrente: STATO
 - condizioni: HASH_TABLE<STRING,BOOLEAN>
 * chiusura
   -- assicura che stato_corrente sia uno stato stabile, eseguendo tutte le transizioni
   -- che nella configurazione corrente non hanno bisogno di eventi per scattare


La root dell'applicazione ha come attributi

conf: CONFIGURAZIONE

stati: HASH_TABLE<STRING,STATO>
  -- serve durante l'istanziazione iniziale di stati, transizione e configurazione
  -- una volta che è terminata non serve più

eventi: HASH_TABLE<STRING,STATO>
  -- serve durante la lettura degli eventi dal file


La feature di creazione della root

- legge file SCXML facendone il parsing e creando l'albero che rappresenta la struttura XML
- visita l'albero XML istanziando stati, transizione e configurazione e segnalando i seguenti errori
  - transizioni il cui target non è l'id di alcuno state
  - transizioni la cui condizione non è l'id di alcun data
  - azioni di assegnazione la cui condizione non è l'id di alcun data
- eventuali ulteriori verifiche statiche
- esegue l'evoluzione della SC letta sulla base degli eventi nel file eventi.txt


La feature ottieni_evento serve per filtrare eventuali eventi ignoti

ottieni_evento: STRING
  local
    evento_letto: STRING
  Result := ""
  FROM
    evento_letto := leggi_prossimo_evento (file_eventi)
  UNTIL
    evento_letto IN eventi
  LOOP
    messaggio_di_errore(evento_letto non è un evento legale)
    evento_letto := leggi_prossimo_evento (file_eventi)
  END
  IF evento_letto IN eventi THEN
    Result := evento_letto
<<va fatta la gestione della fine del file durante la lettura>>



La feature evolvi_SC serve per far percorrere alla SC la sequenza di stati determinata dagli eventi nel file eventi.txt

evolvi_SC
  FROM
  UNTIL
    conf.stato_corrente.finale
  LOOP
    conf.chiusura
    IF evento_corrente /= "" THEN
      IF NOT conf.stato_corrente.determinismo(evento_corrente) THEN
        messaggio_di_errore
      ELSE
        conf.stato_corrente := conf.stato_corrente.target(evento_corrente)


Aggiungere feature per tracciare su file:
- la SC costruita dal programma
- la configurazione iniziale in termini di stato e nomi-valori delle condizioni
- l'evoluzione della SC in termini di sequenza di:
  stato, evento, condizione, azione, target
